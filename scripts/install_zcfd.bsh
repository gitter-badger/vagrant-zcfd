#!/bin/bash

if [ $# -eq 1 ]; then
  ZTARGET=$1
fi

# Check version of cmake
CMAKE_VER=`cmake --version | grep 2.8`
if [ ! -n "$CMAKE_VER" ]; then
  echo "CMake 2.8 not found"
  exit 1
fi

echo 'Building zCFD'

mkdir -p BUILD
pushd BUILD

# Clone the repo
if [ ! -d "zCFDSuperbuild" ]; then
	git clone git@github.com:zenotech/zCFDSuperBuild.git
else
	pushd zCFDSuperbuild
	git pull 
	popd
fi

# Checkout branch
pushd zCFDSuperbuild
git checkout release-0.1.0
popd

ZCFD_EXTRA_ARGS="-DOPT_ARCH:STRING=HOST"
if [ -n "$ZTARGET" ]; then
  echo $ZTARGET
  if [ "$ZTARGET" == "avx" ]; then
    CPU_FLAG='avx'
    ZCFD_EXTRA_ARGS="-DOPT_ARCH:STRING=AVX"
  else
    CPU_FLAG='sse'
    ZCFD_EXTRA_ARGS="-DOPT_ARCH:STRING=SSE"
  fi
else
  CPU_FLAG=`cat /proc/cpuinfo | grep flags | grep -q avx && echo $?`
  if [ "$CPU_FLAG" == "0" ] ; then
    # AVX
    CPU_FLAG='avx'
    ZCFD_EXTRA_ARGS="-DOPT_ARCH:STRING=AVX"
  else
    # SSE
    CPU_FLAG='sse'
    ZCFD_EXTRA_ARGS="-DOPT_ARCH:STRING=SSE"
  fi  
fi

ZCFD_PACKAGE_NAME="zCFD-$CPU_FLAG"

# Check for presence of CUDA compiler
CUDA_COMPILER=`type -p nvcc`
if [ -f "$CUDA_COMPILER" ]; then
	ZCFD_PACKAGE_NAME="zCFD-cuda-$CPU_FLAG"
fi

# Check for presence of Intel compiler
INTEL_COMPILER=`type -p icc`
INTEL_VERSION="15.0.0"
if [ -f "$INTEL_COMPILER" ]; then
	 ZCFD_PACKAGE_NAME="zCFD-icc-$CPU_FLAG"
	 ZCFD_EXTRA_ARGS="-DINTEL_CC:BOOL=ON;$ZCFD_EXTRA_ARGS"

    # Should we build phi support
    MIC_INFO=`type -p micinfo`
    if [ -f "$MIC_INFO" ]; then
        ZCFD_PACKAGE_NAME="zCFD-icc-phi-$CPU_FLAG"
        ZCFD_EXTRA_ARGS="-DINTEL_CC:BOOL=ON;-DBUILD_PHI:BOOL=ON;$ZCFD_EXTRA_ARGS"
    fi
    INTEL_VERSION=`icc -dumpversion`
fi

# Build directory
mkdir -p ${ZCFD_PACKAGE_NAME}_build

# Build
pushd ${ZCFD_PACKAGE_NAME}_build
rm CMakeCache.txt

PREFIX=`pwd`/install
export PATH=$PREFIX/bin:$PATH
export LD_LIBRARY_PATH=$PREFIX/lib
export BOOST_ROOT=$PREFIX
export BZIP2_INCLUDE=`pwd`/install/include
export BZIP2_LIBPATH=`pwd`/install/lib

PV_EXTRA_ARGS="-DCMAKE_BUILD_TYPE:STRING=Release;-DPYTHON_EXECUTABLE:FILEPATH=${PREFIX}/bin/python;-DVTK_OPENGL_HAS_OSMESA:BOOL=ON;-DVTK_XDMF_USE_MPI:BOOL=ON;-DVTK_USE_SYSTEM_HDF5:BOOL=ON;-DXDMF_BUILD_MPI:BOOL=ON;-DOSMESA_INCLUDE_DIR:PATH=${PREFIX}/include;-DOSMESA_LIBRARY:FILEPATH=${PREFIX}/lib/libOSMesa.so;-DOPENGL_INCLUDE_DIR:PATH=${PREFIX}/include;-DOPENGL_gl_LIBRARY:FILEPATH="";-DOPENGL_glu_LIBRARY:FILEPATH=${PREFIX}/lib/libGLU.so;-DOPENGL_xmesa_INCLUDE_DIR:PATH="";-DVTK_USE_X:BOOL=OFF"

CMAKE_EXE=`type -p cmake`
if [ ! -f "$CMAKE_EXE" ]; then
	CMAKE_EXE=cmake28
fi

# Terminate script on first error
set -e

$CMAKE_EXE -DCMAKE_BUILD_TYPE:STRING:=Release \
      -DENABLE_boost:BOOL=ON \
      -DENABLE_ffmpeg:BOOL=ON \
      -DENABLE_hdf5:BOOL=ON \
      -DENABLE_mpi:BOOL=ON \
      -DENABLE_osmesa:BOOL=ON \
      -DENABLE_python:BOOL=ON \
      -DENABLE_paraviewsdk:BOOL=ON\
      -DENABLE_paraview:BOOL=ON \
      -DPV_EXTRA_CMAKE_ARGS:STRING="${PV_EXTRA_ARGS}" \
      -DCPACK_PACKAGE_NAME:STRING=${ZCFD_PACKAGE_NAME} \
      -DENABLE_zcfd:BOOL=ON \
      -DZCFD_EXTRA_CMAKE_ARGS:STRING="${ZCFD_EXTRA_ARGS}" \
      ../zCFDSuperbuild

make -j1

# Install setuptools
wget --no-check-certificate https://bootstrap.pypa.io/ez_setup.py -O - | install/bin/python
# Install pip
wget --no-check-certificate https://bootstrap.pypa.io/get-pip.py -O - | install/bin/python
# Install yolk
install/bin/pip install yolk

# Install requirements
install/bin/pip install -r ../zCFDSuperbuild/requirements.txt
# If CUDA present install pycuda
if [ -f "$CUDA_COMPILER" ]; then
	install/bin/pip install pycuda==2014.1
  #  Need to copy CUDA libraries into lib - this is permitted under the NVIDIA CUDA EULA
  cp "$( dirname "$CUDA_COMPILER" )"/../lib64/* install/lib
fi

# Need to fix up scripts in bin that use python
P_SCRIPTS=`grep python install/bin/* | grep '#!' | cut -d : -f 1`
for P in $P_SCRIPTS; do 
  echo "Fixing python path in $P" 
  sed -i.tmp -e "s/\#\!\/.*/\#\!\/usr\/bin\/env python/" $P
  rm -f "${P}.tmp"  
done

# Always install the intel compiler redistributable libraries
if [ "$INTEL_VERSION" == "14.0.2" ]; then
  wget http://packages.zenotech.com/l_ccompxe_2013_sp1.4.211_redist.tgz
  tar xvf l_ccompxe_2013_sp1.4.211_redist.tgz
  pushd l_ccompxe_2013_sp1.4.211_redist
  ./install.sh --eula --install-path ../install/intel
  popd
else
  wget http://packages.zenotech.com/l_ccompxe_2015.0.090_redist.tgz
  tar xvf l_ccompxe_2015.0.090_redist.tgz
  pushd l_ccompxe_2015.0.090_redist
  ./install.sh --eula --install-path ../install/intel
  popd
fi

CPACK_EXE=`type -p cpack`
if [ ! -f "$CPACK_EXE" ]; then
	CPACK_EXE=cpack28
fi

# Package
$CPACK_EXE -G TGZ # --debug --verbose

popd 
popd
cp BUILD/${ZCFD_PACKAGE_NAME}_build/${ZCFD_PACKAGE_NAME}*.tar.gz .

echo 'Finished Build zCFD'

